/* 주제: setTimeout(callback, delay[, ...args])
- 지정된 시간이 지나면 자동으로 호출될 함수를 등록하는 방법
  딱 한 번만 호출된다.
- callback : 지정된 시간이 지났을 때 호출될 함수 주소
- delay : 타임아웃 시간(밀리초)
- ...args : callback을 호출할 때 넘겨줄 값들
*/

// 이렇게도 할 수 있지만, f1()이 setTimeout의 콜백함수라는 것이 명시적이지 않아 코드가 길어질 경우 찾기 힘들 수 있다.
// 1초 뒤에 호출될 함수를 심는다.
function f1() {
  console.log('1초 지났음')
}
setTimeout(f1, 1000) // 비동기 방식 호출. 1초 후에 호출될 함수를 등록 후 바로 리턴한다.
console.log('첫번째 timeout 함수를 심었다.')

// 따라서 setTimeout안에 넣자. (실무)
// 개발자들이 '함수 넘겨'라고 말하지만 사실은 함수의 주소를 넘기는 것이다.
setTimeout(function() { // 비동기 방식 호출. 3초 후에 호출될 함수를 등록 후 바로 리턴한다.
  console.log('3초 지났음')
}, 3000)
console.log('두번째 timeout 함수를 심었다.')

/* => "비동기 방식 호출"임을 알 수 있다.
  자바스크립트는 비동기방식이 엄청 많다. 주의!
*/
