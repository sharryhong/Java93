<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">
        
    <!-- 자동으로 생성할 클래스가 있는 패키지를 지정한다.
         단, 자동으로 객체를 생성하려면 그 클래스에 @Component 애노테이션이 붙어 있어야한다. 
     -->
    <context:component-scan base-package="bitcamp.java93"/>
    
    <!-- 설정파일에서 사용할 정보를 담은 properties파일 로딩 -->
	  <context:property-placeholder location="bitcamp/java93/jdbc.properties"/>
	   
	  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	    <property name="driverClassName" value="${jdbc_driverClassName}"/>
	    <property name="url" value="${jdbc_url}"/>
	    <property name="username" value="${jdbc_username}"/>
	    <property name="password" value="${jdbc_password}"/>
	  </bean>
	   
	  <!-- DB 트랜잭션을 관리하는 객체이다.
	       Mybatis에서 관리하던 것을 스프링으로 옮겼다. -->
	  <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource"/>
	  </bean>
	   
	  <!-- SqlSessionFactory를 만들어줌. FactoryFactory안하고 이 개발자는 이렇게 만듦 -->
	  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" > 
	    <property name="dataSource"  ref="dataSource"/>
	    <property name="typeAliasesPackage" value="bitcamp.java93.domain"/>
	    <property name="mapperLocations" value="classpath*:bitcamp/java93/dao/*Dao.xml"/>
	  </bean>
	  
	  <!-- DAO 인터페이스의 구현체를 자동으로 생성할 객체 준비 -->
	  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <property name="basePackage" value="bitcamp.java93.dao" />
	  </bean>

</beans>